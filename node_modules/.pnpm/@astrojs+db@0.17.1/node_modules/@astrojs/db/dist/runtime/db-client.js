import { createClient } from "@libsql/client";
import { drizzle as drizzleLibsql } from "drizzle-orm/libsql";
const isWebContainer = !!process.versions?.webcontainer;
function createLocalDatabaseClient(options) {
  const url = isWebContainer ? "file:content.db" : options.dbUrl;
  const client = createClient({ url });
  const db = drizzleLibsql(client);
  return db;
}
function createRemoteDatabaseClient(options) {
  const url = new URL(options.url);
  return createRemoteLibSQLClient(options.token, url, options.url.toString());
}
function parseOpts(config) {
  return {
    ...config,
    ...config.syncInterval ? { syncInterval: parseInt(config.syncInterval) } : {},
    ..."readYourWrites" in config ? { readYourWrites: config.readYourWrites !== "false" } : {},
    ..."offline" in config ? { offline: config.offline !== "false" } : {},
    ..."tls" in config ? { tls: config.tls !== "false" } : {},
    ...config.concurrency ? { concurrency: parseInt(config.concurrency) } : {}
  };
}
function createRemoteLibSQLClient(authToken, dbURL, rawUrl) {
  const options = Object.fromEntries(dbURL.searchParams.entries());
  dbURL.search = "";
  let url = dbURL.toString();
  if (dbURL.protocol === "memory:") {
    url = ":memory:";
  } else if (dbURL.protocol === "file:" && dbURL.pathname.startsWith("/") && !rawUrl.startsWith("file:/")) {
    url = "file:" + dbURL.pathname.substring(1);
  }
  const client = createClient({ ...parseOpts(options), url, authToken });
  return drizzleLibsql(client);
}
export {
  createLocalDatabaseClient,
  createRemoteDatabaseClient,
  parseOpts
};
